// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum VerficationEnum {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  NOT_ATTEMPTED
  ATTEMPTED
  SOLVED
}

model User {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  username         String             @unique
  isEmailVerified  Boolean            @default(false)
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userPreferences  UserPreferences?
  Session          Session[]
  VerificationCode VerificationCode[]
  submissions      Submission[]  // Tracks all submissions made by user
  userProblems     UserProblem[] // Tracks problem attempts and status for this user

  problemsCreated  Problem[] @relation("UserCreatedProblems")

  @@map("users")
}

model UserProblem {
  id          String   @id @default(uuid())
  userId      String   
  problemId   Int      
  status      Status   @default(NOT_ATTEMPTED) // User's progress on this problem
  lastAttempt String?  // Stores the latest submission code by the user
  passedTests Int      @default(0) // Number of test cases passed
  totalTests  Int      @default(0) // Total test cases for the problem
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
  @@map("user_problems")
}

model UserPreferences {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique
  enable2FA          Boolean  @default(false)
  emailNotifications Boolean  @default(true)
  twoFactorSecret    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@map("user_preferences")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userAgent String?
  expiresAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '30 days'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Create an index for efficient lookups by userId
  @@map("sessions") // Maps this model to the "sessions" table in the database
}

model VerificationCode {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  type      VerficationEnum
  code      String?
  expiresAt DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([userId])
  @@map("verification_codes")
}

model Problem {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  difficulty  ProblemDifficulty
  status      Status   @default(NOT_ATTEMPTED) // Status of the problem
  content     String
  solutions   Json
  tags        String[]
  testCases   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById String? // Nullable in case it's a system-generated problem
  createdBy   User?   @relation("UserCreatedProblems", fields: [createdById], references: [id], onDelete: SetNull) // Updated relation

  userProblems UserProblem[] // Links to users who attempted this problem
  submissions  Submission[]  // All submissions related to this problem

  @@map("problems")
}

model Submission {
  id         String   @id @default(uuid())
  userId     String
  problemId  Int
  code       String   // User's submitted code
  language   String   // Language used for submission
  passed     Boolean  // Whether the submission passed all test cases
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem    Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist")
}
