generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  isEmailVerified  Boolean            @default(false)
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  username         String             @unique
  problems         Problem[]
  Session          Session[]
  submissions      submissions[]
  userPreferences  UserPreferences?
  user_problems    user_problems[]
  VerificationCode VerificationCode[]

  isBetaUser      Boolean            @default(false)

  @@map("users")
}

model UserPreferences {
  id                 String   @id @default(uuid())
  userId             String   @unique
  enable2FA          Boolean  @default(false)
  emailNotifications Boolean  @default(true)
  twoFactorSecret    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_preferences")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  userAgent String?
  expiresAt DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + '30 days'::interval)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("sessions")
}

model VerificationCode {
  id        String          @id @default(uuid())
  userId    String
  type      VerficationEnum
  expiresAt DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  code      String?
  user      User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("verification_codes")
}

model Problem {
  slug          String            @unique
  title         String
  content       String
  createdAt     DateTime          @default(now())
  createdById   String?
  solutions     Json
  tags          String[]
  updatedAt     DateTime
  id            Int               @id @default(autoincrement())
  difficulty    ProblemDifficulty
  status        Status            @default(NOT_ATTEMPTED)
  users         User?             @relation(fields: [createdById], references: [id])
  submissions   submissions[]
  TestCases     TestCase[]
  user_problems user_problems[]

  @@map("problems")
}

model TestCase {
  id        Int          @id @default(autoincrement())
  problemId Int
  type      TestcaseEnum
  input     String
  output    String
  Problem   Problem      @relation(fields: [problemId], references: [id])

  @@map("testcases")
}

model submissions {
  userId    String
  code      String
  createdAt DateTime @default(now())
  id        String   @id
  language  String
  passed    Boolean
  problemId Int
  problems  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_problems {
  id          String   @id
  userId      String
  problemId   Int
  status      Status   @default(NOT_ATTEMPTED)
  lastAttempt String?
  passedTests Int      @default(0)
  totalTests  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  problems    Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  users       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model waitlist {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
}

enum VerficationEnum {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  NOT_ATTEMPTED
  ATTEMPTED
  SOLVED
}

enum TestcaseEnum {
  ARRAY_AND_TARGET
  ARRAY_ONLY
  SINGLE_INTEGER
  DOUBLE_INTEGER
  STRING
  SINGLE_STRING
  DOUBLE_STRING
  ARRAY_AND_STRING
  TWO_ARRAYS
  LINKED_LIST
  TREE
}
