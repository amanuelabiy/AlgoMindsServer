// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum VerficationEnum {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model User {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  isEmailVerified  Boolean            @default(false)
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userPreferences  UserPreferences?
  Session          Session[]
  VerificationCode VerificationCode[]

  @@map("users")
}

model UserPreferences {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique
  enable2FA          Boolean  @default(false)
  emailNotifications Boolean  @default(true)
  twoFactorSecret    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@map("user_preferences")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userAgent String?
  expiresAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '30 days'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Create an index for efficient lookups by userId
  @@map("sessions") // Maps this model to the "sessions" table in the database
}

model VerificationCode {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  type      VerficationEnum
  expiresAt DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([userId])
  @@map("verification_codes")
}

model Problem {
  id                Int     @id @default(autoincrement())
  slug              String  @unique
  title             String
  difficulty        String
  content           String
  answer_cplusplus  String?
  answer_java       String?
  answer_python     String?
  answer_javascript String?
  explanation       String?
  
 
  @@map("problems")
}
