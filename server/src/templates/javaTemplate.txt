import java.util.*;
import java.util.regex.*;
import java.lang.reflect.*;

public class Main {
    // Code Snippet START ====================
   class Solution {
    public int[] twoSum(int[] nums, int target) {
         Map<Integer, Integer> map = new HashMap<>();
        // Loop through the array
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            // If the complement exists in the map, return the indices
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            // Otherwise, store the number and its index in the map
            map.put(nums[i], i);
        }
        // If no solution found, throw an exception (or return null, as per requirements)
        throw new IllegalArgumentException("No two sum solution exists");
    }
}
    // Code Snippet END ====================

    public static List<List<Object>> readInput() {
        List<List<Object>> results = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        // Regex to match: string s="...", array a="...", integer i="..."
        Pattern pattern = Pattern.compile("(string s=\\\"[^\"]*\\\"|array a=\\\"[^\"]*\\\"|integer i=\\\"[^\"]*\\\")");
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            if (line.trim().isEmpty()) continue;
            List<Object> curLine = new ArrayList<>();
            Matcher matcher = pattern.matcher(line);
            while (matcher.find()) {
                String item = matcher.group();
                if (item.startsWith("string")) {
                    Matcher m = Pattern.compile("string s=\\\"([^\"]*)\\\"").matcher(item);
                    if (m.find()) {
                        curLine.add(m.group(1));
                    }
                } else if (item.startsWith("array")) {
                    Matcher m = Pattern.compile("array a=\\\"([^\"]*)\\\"").matcher(item);
                    if (m.find()) {
                        String arrayStr = m.group(1).trim();
                        if (arrayStr.startsWith("[") && arrayStr.endsWith("]")) {
                            arrayStr = arrayStr.substring(1, arrayStr.length() - 1);
                            String[] parts = arrayStr.split(",");
                            List<Integer> array = new ArrayList<>();
                            for (String part : parts) {
                                part = part.trim();
                                if (!part.isEmpty()) {
                                    try {
                                        array.add(Integer.parseInt(part));
                                    } catch (NumberFormatException e) {
                                        System.out.println("Error parsing integer in array: " + part);
                                    }
                                }
                            }
                            curLine.add(array);
                        } else {
                            System.out.println("Invalid array format: " + m.group(1));
                        }
                    }
                } else if (item.startsWith("integer")) {
                    Matcher m = Pattern.compile("integer i=\\\"([^\"]*)\\\"").matcher(item);
                    if (m.find()) {
                        String numStr = m.group(1);
                        try {
                            curLine.add(Integer.parseInt(numStr));
                        } catch (NumberFormatException e) {
                            System.out.println("Invalid integer: " + numStr);
                        }
                    }
                }
            }
            results.add(curLine);
        }
        scanner.close();
        return results;
    }

    public static Method getFirstDefinedMethod(Class<?> cls) {
        Method[] methods = cls.getDeclaredMethods();
        for (Method method : methods) {
            if (!Modifier.isStatic(method.getModifiers())) {
                return method;
            }
        }
        return null;
    }

    public static void main(String[] args) {
        List<List<Object>> lines = readInput();
        Method method = getFirstDefinedMethod(Solution.class);
        if (method != null) {
            try {
                Solution solutionInstance = new Solution();
                Class<?>[] paramTypes = method.getParameterTypes();
                for (List<Object> inputParams : lines) {
                    Object[] paramsArray = inputParams.toArray();
                    // If the method signature is twoSum(int[] nums, int target),
                    // then paramTypes[0] should be int[].class and paramTypes[1] should be int.class.
                    if (paramTypes.length > 0 && paramTypes[0].equals(int[].class) && paramsArray[0] instanceof List) {
                        List<?> list = (List<?>) paramsArray[0];
                        int[] nums = new int[list.size()];
                        for (int i = 0; i < list.size(); i++) {
                            nums[i] = ((Number) list.get(i)).intValue();
                        }
                        paramsArray[0] = nums;
                    }
                    // Invoke the method with the provided parameters.
                    Object ans = method.invoke(solutionInstance, paramsArray);
                    System.out.println("Input: " + inputParams);
                    if (ans instanceof int[]) {
                        System.out.println("Output: " + Arrays.toString((int[]) ans));
                    } else {
                        System.out.println("Output: " + ans);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("no method found");
        }
    }
}
