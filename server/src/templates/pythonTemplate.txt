
import sys
import re
import json
import inspect

# Code Snippet START ====================

# Code Snippet END ====================
    
def readInput():
    results = []
    # Regex pattern for all supported types
    pattern = r'(string s="[^"]*"|array a="[^"]*"|integer i="[^"]*")'

    for line in sys.stdin:
        curLine = []
        if not line.strip():
            continue  # Skip empty or whitespace-only lines

        # Find all input items in the line
        items = re.findall(pattern, line)

        for item in items:
            if item.startswith('string'):
                match = re.match(r'string s="([^"]*)"', item)
                if match:
                    curLine.append(match.group(1))

            elif item.startswith('array'):
                match = re.match(r'array a="([^"]*)"', item)
                if match:
                    try:
                        array = json.loads(match.group(1))
                        curLine.append(array)
                    except json.JSONDecodeError:
                        print(f"Error decoding array: {match.group(1)}")

            elif item.startswith('integer'):
                match = re.match(r'integer i="([^"]*)"', item)
                if match:
                    try:
                        number = int(match.group(1))
                        curLine.append(number)
                    except ValueError:
                        print(f"Invalid integer: {match.group(1)}")
            
                    

        results.append(curLine)

    return results
def get_first_defined_method(cls):
    for name, obj in cls.__dict__.items():
        if callable(obj):
            return name
    return None

def main():

    lines = readInput()
    # Add your main code here
    
    first_method_name = get_first_defined_method(Solution)

    if first_method_name:
        solution_instance = Solution()
        method = getattr(solution_instance, first_method_name)  # Retrieve method
        result = []
        for i in lines:
            ans = method(*i)  # Call the method
            print(f'Input: {i}')
            print(f'Output: {ans}')

          
    else:
        print("no method found")     
        
    

        

if __name__ == "__main__":
    main()

